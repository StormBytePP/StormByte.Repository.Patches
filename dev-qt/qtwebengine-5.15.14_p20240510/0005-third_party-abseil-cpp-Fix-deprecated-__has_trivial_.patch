From 74eb517c36b55c502dee5780b8cf8b628ef9d271 Mon Sep 17 00:00:00 2001
From: "David C. Manuelda" <StormByte@gmail.com>
Date: Thu, 19 Sep 2024 20:36:22 +0200
Subject: [PATCH 5/6] third_party/abseil-cpp: Fix deprecated __has_trivial_xxx
 in favor of their non deprecated ones

Signed-off-by: David C. Manuelda <StormByte@gmail.com>
---
 .../third_party/abseil-cpp/absl/meta/type_traits.h     | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/3rdparty/chromium/third_party/abseil-cpp/absl/meta/type_traits.h b/src/3rdparty/chromium/third_party/abseil-cpp/absl/meta/type_traits.h
index eb6ed9166..a05e74e56 100644
--- a/src/3rdparty/chromium/third_party/abseil-cpp/absl/meta/type_traits.h
+++ b/src/3rdparty/chromium/third_party/abseil-cpp/absl/meta/type_traits.h
@@ -293,7 +293,7 @@ struct is_trivially_destructible
 #ifdef ABSL_HAVE_STD_IS_TRIVIALLY_DESTRUCTIBLE
     : std::is_trivially_destructible<T> {
 #else
-    : std::integral_constant<bool, __has_trivial_destructor(T) &&
+    : std::integral_constant<bool, __is_trivially_destructible(T) &&
                                    std::is_destructible<T>::value> {
 #endif
 #ifdef ABSL_HAVE_STD_IS_TRIVIALLY_DESTRUCTIBLE
@@ -346,7 +346,7 @@ struct is_trivially_default_constructible
 #if defined(ABSL_HAVE_STD_IS_TRIVIALLY_CONSTRUCTIBLE)
     : std::is_trivially_default_constructible<T> {
 #else
-    : std::integral_constant<bool, __has_trivial_constructor(T) &&
+    : std::integral_constant<bool, __is_trivially_constructible(T) &&
                                    std::is_default_constructible<T>::value &&
                                    is_trivially_destructible<T>::value> {
 #endif
@@ -498,7 +498,7 @@ struct is_trivially_copy_assignable
     : std::is_trivially_copy_assignable<T> {
 #else
     : std::integral_constant<
-          bool, __has_trivial_assign(typename std::remove_reference<T>::type) &&
+          bool, __is_trivially_assignable(typename std::remove_reference<T>::type) &&
                     absl::is_copy_assignable<T>::value> {
 #endif
 #ifdef ABSL_HAVE_STD_IS_TRIVIALLY_ASSIGNABLE
@@ -549,8 +549,8 @@ class is_trivially_copyable_impl {
 
  public:
   static constexpr bool kValue =
-      (__has_trivial_copy(ExtentsRemoved) || !kIsCopyOrMoveConstructible) &&
-      (__has_trivial_assign(ExtentsRemoved) || !kIsCopyOrMoveAssignable) &&
+      (__is_trivially_copyable(ExtentsRemoved) || !kIsCopyOrMoveConstructible) &&
+      (__is_trivially_assignable(ExtentsRemoved) || !kIsCopyOrMoveAssignable) &&
       (kIsCopyOrMoveConstructible || kIsCopyOrMoveAssignable) &&
       is_trivially_destructible<ExtentsRemoved>::value &&
       // We need to check for this explicitly because otherwise we'll say
-- 
2.46.0

