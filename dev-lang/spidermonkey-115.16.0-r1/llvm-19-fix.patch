--- a/js/src/threading/ExclusiveData.h
+++ b/js/src/threading/ExclusiveData.h
@@ -104,21 +104,16 @@ class ExclusiveData {
 
   /**
    * Create a new `ExclusiveData`, constructing the protected value in place.
    */
   template <typename... Args>
   explicit ExclusiveData(const MutexId& id, Args&&... args)
       : lock_(id), value_(std::forward<Args>(args)...) {}
 
-  ExclusiveData(ExclusiveData&& rhs)
-      : lock_(std::move(rhs.lock)), value_(std::move(rhs.value_)) {
-    MOZ_ASSERT(&rhs != this, "self-move disallowed!");
-  }
-
   ExclusiveData& operator=(ExclusiveData&& rhs) {
     this->~ExclusiveData();
     new (mozilla::KnownNotNull, this) ExclusiveData(std::move(rhs));
     return *this;
   }
 
   /**
    * An RAII class that provides exclusive access to a `ExclusiveData<T>`'s