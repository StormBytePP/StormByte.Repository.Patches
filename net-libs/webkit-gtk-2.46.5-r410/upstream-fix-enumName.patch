--- a/Source/WTF/wtf/EnumTraits.h	2025-04-02 12:29:51.305914320 +0200
+++ b/Source/WTF/wtf/EnumTraits.h	2025-04-02 12:30:00.738011232 +0200
@@ -59,6 +59,7 @@
 #include <algorithm>
 #include <span>
 #include <type_traits>
+#include <wtf/Compiler.h>
 
 namespace WTF {
 
@@ -85,36 +86,26 @@
 
 template<typename T, typename E, E e, E... es>
 struct EnumValueChecker<T, EnumValues<E, e, es...>> {
-    static constexpr bool isValidEnum(T t)
+    static constexpr bool isValidEnumForPersistence(T t)
     {
-        return (static_cast<T>(e) == t) ? true : EnumValueChecker<T, EnumValues<E, es...>>::isValidEnum(t);
+        return (static_cast<T>(e) == t) ? true : EnumValueChecker<T, EnumValues<E, es...>>::isValidEnumForPersistence(t);
     }
 };
 
 template<typename T, typename E>
 struct EnumValueChecker<T, EnumValues<E>> {
-    static constexpr bool isValidEnum(T)
+    static constexpr bool isValidEnumForPersistence(T)
     {
         return false;
     }
 };
 
-template<typename E, typename = std::enable_if_t<!std::is_same_v<std::underlying_type_t<E>, bool>>>
-bool isValidEnum(std::underlying_type_t<E> t)
-{
-    return EnumValueChecker<std::underlying_type_t<E>, typename EnumTraits<E>::values>::isValidEnum(t);
-}
-
-template<typename E, typename = std::enable_if_t<std::is_same_v<std::underlying_type_t<E>, bool>>>
-constexpr bool isValidEnum(bool t)
-{
-    return !t || t == 1;
-}
+template<typename E> bool isValidEnum(std::underlying_type_t<E>);
 
 template<typename E, typename = std::enable_if_t<!std::is_same_v<std::underlying_type_t<E>, bool>>>
 bool isValidEnumForPersistence(std::underlying_type_t<E> t)
 {
-    return EnumValueChecker<std::underlying_type_t<E>, typename EnumTraitsForPersistence<E>::values>::isValidEnum(t);
+    return EnumValueChecker<std::underlying_type_t<E>, typename EnumTraitsForPersistence<E>::values>::isValidEnumForPersistence(t);
 }
 
 template<typename E, typename = std::enable_if_t<std::is_same_v<std::underlying_type_t<E>, bool>>>
@@ -161,6 +152,16 @@
 #pragma clang diagnostic ignored "-Wenum-constexpr-conversion"
 #endif
 
+#if COMPILER(CLANG) && __clang_major__ >= 16
+template <typename E, auto V, typename = void>
+inline constexpr bool isEnumConstexprStaticCastValid = false;
+template <typename E, auto V>
+inline constexpr bool isEnumConstexprStaticCastValid<E, V, std::void_t<std::integral_constant<E, static_cast<E>(V)>>> = true;
+#else
+template <typename, auto>
+inline constexpr bool isEnumConstexprStaticCastValid = true;
+#endif
+
 template<typename E>
 constexpr std::span<const char> enumTypeNameImpl()
 {
@@ -198,13 +199,13 @@
 #if COMPILER(CLANG)
     const size_t prefix = sizeof("std::span<const char> WTF::enumNameImpl() [V = ") - 1;
     const size_t suffix = sizeof("]") - 1;
-    std::span<const char> name { __PRETTY_FUNCTION__ + prefix, sizeof(__PRETTY_FUNCTION__) - prefix - suffix - 1 };
+    auto name = std::span { __PRETTY_FUNCTION__ }.subspan(prefix, sizeof(__PRETTY_FUNCTION__) - prefix - suffix - 1);
     if (name[0] == '(' || name[0] == '-' || ('0' <= name[0] && name[0] <= '9'))
         return { };
 #elif COMPILER(GCC)
     const size_t prefix = sizeof("constexpr std::span<const char> WTF::enumNameImpl() [with auto V = ") - 1;
     const size_t suffix = sizeof("]") - 1;
-    std::span<const char> name { __PRETTY_FUNCTION__ + prefix, sizeof(__PRETTY_FUNCTION__) - prefix - suffix - 1 };
+    std::span<const char> name = std::span { __PRETTY_FUNCTION__ }.subspan(prefix, sizeof(__PRETTY_FUNCTION__) - prefix - suffix - 1);
     if (name[0] == '(')
         name = { };
 #else
@@ -224,38 +225,94 @@
     return result;
 }
 
-namespace detail {
+template<typename E, auto V>
+constexpr std::span<const char> enumName()
+{
+    if constexpr (isEnumConstexprStaticCastValid<E, V>)
+        return enumName<static_cast<E>(V)>();
+    else
+        return { };
+}
 
-template<size_t i, size_t end>
-constexpr void forConstexpr(const auto& func)
+template<typename E>
+constexpr std::underlying_type_t<E> enumNamesMin()
 {
-    if constexpr (i < end) {
-        func(std::integral_constant<size_t, i>());
-        forConstexpr<i + 1, end>(func);
+    using Underlying = std::underlying_type_t<E>;
+
+    if constexpr (requires { EnumTraits<E>::min; }) {
+        static_assert(std::is_same_v<std::remove_cv_t<decltype(EnumTraits<E>::min)>, Underlying>,
+            "EnumTraits<E>::min must have the same type as the underlying type of the enum.");
+        return EnumTraits<E>::min;
     }
+
+    // Default for both signed and unsigned enums.
+    return 0;
 }
 
+template<typename E>
+constexpr std::underlying_type_t<E> enumNamesMax()
+{
+    using Underlying = std::underlying_type_t<E>;
+
+    if constexpr (requires { EnumTraits<E>::max; }) {
+        static_assert(std::is_same_v<std::remove_cv_t<decltype(EnumTraits<E>::max)>, Underlying>,
+            "EnumTraits<E>::max must have the same type as the underlying type of the enum.");
+        return EnumTraits<E>::max;
+    }
+
+    constexpr Underlying defaultMax = std::is_signed_v<Underlying>
+        ? static_cast<Underlying>(INT8_MAX) : static_cast<Underlying>(UINT8_MAX);
+    constexpr Underlying computedMax = (sizeof(E) > 1) ? static_cast<Underlying>(defaultMax << 1) : defaultMax;
+    return computedMax;
 }
 
-template<typename E, size_t limit = 256>
-constexpr std::array<std::span<const char>, limit> enumNames()
+template<typename E>
+constexpr size_t enumNamesSize()
 {
-    std::array<std::span<const char>, limit> names;
+    using Underlying = std::underlying_type_t<E>;
+    using Unsigned = std::make_unsigned_t<Underlying>;
+
+    constexpr Underlying min = enumNamesMin<E>();
+    constexpr Underlying max = enumNamesMax<E>();
+    static_assert(min <= max, "Invalid enum range: min must be <= max.");
+    return static_cast<size_t>(static_cast<Unsigned>(max - min)) + 1;
+}
 
-    detail::forConstexpr<0, limit>([&] (auto i) {
-        names[i] = enumName<static_cast<E>(static_cast<unsigned>(i))>();
-    });
-    return names;
+template<typename E, size_t... Is>
+constexpr auto makeEnumNames(std::index_sequence<Is...>)
+{
+    constexpr auto min = enumNamesMin<E>();
+    return std::array<std::span<const char>, sizeof...(Is)> {
+        enumName<E, static_cast<std::underlying_type_t<E>>(Is) + min>()...
+    };
 }
 
+template<typename E>
+constexpr auto enumNames()
+{
+    constexpr size_t size = enumNamesSize<E>();
+    return makeEnumNames<E>(std::make_index_sequence<size> { });
+}
 
-template<typename T>
-constexpr std::span<const char> enumName(T v)
+template<typename E>
+constexpr std::span<const char> enumName(E v)
 {
-    constexpr auto names = enumNames<std::decay_t<T>>();
-    if (static_cast<size_t>(v) >= names.size())
+    static_assert(std::is_enum_v<E>, "enumName can only be used with enum types.");
+
+    using Underlying = std::underlying_type_t<E>;
+    using Unsigned = std::make_unsigned_t<Underlying>;
+
+    constexpr auto names = enumNames<E>();
+    constexpr Underlying min = enumNamesMin<E>();
+    constexpr Underlying max = enumNamesMax<E>();
+
+    Underlying value = static_cast<Underlying>(v);
+    if (value < min || value > max)
         return { "enum out of range" };
-    return names[static_cast<uint8_t>(v)];
+
+    // Compute index safely using unsigned extension.
+    size_t index = static_cast<size_t>(static_cast<Unsigned>(value - min));
+    return names[index];
 }
 
 #if COMPILER(CLANG)
